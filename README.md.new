# WinKernelLite

WinKernelLite is a lightweight library that enables testing and usage of a limited part of Windows kernel functionality:
- working with linked lists (LIST_ENTRY)
- working with UNICODE_STRING
- working with Windows kernel heap functions
The main purpose of this library is to help develop code aimed for Windows kernel mode in user mode with all debugging and testing capabilities.
For example, in a typical case, Windows kernel developers of security solutions need to develop:
- Windows drivers which have various callbacks to OS-related events, such as: minifilter FS drivers, upper filter drivers, callbacks to PsSetCreateProcessNotifyRoutineEx, CmRegisterCallbackEx and similar APIs. When an event occurs in the kernel, the corresponding event is stored in an internal structure in memory, and a separate routine checks that this event matches certain filters, exclusion lists, etc., and then handles these events appropriately. This is often implemented using linked lists, red-black trees, and similar structures. UNICODE_STRING is used for storing Unicode data that is typically used in these scenarios.
- User mode code, including Windows services that interact with the kernel mode through one of the available methods: private IOCTLs, minifilter driver communication ports, etc.
One of the most significant parts of the code in drivers is the code that implements application logic for working with data, passing it to user mode, and so on.
This library serves as a foundation that can be extended as needed to debug and test this part of the kernel mode code in user mode.
Take into account that it's not trivial to guarantee that this code works in the same way as Windows kernel mode API due to various reasons, such as the unavailability of Windows kernel source code (except for some parts in WRK).

## Project Goals

While Microsoft provides the Windows Research Kernel (WRK) for academic purposes, the kernel internals remain closed-source, making it difficult to understand the exact implementation details behind kernel functions. Additionally, testing and debugging kernel code is complex and often slow.

WinKernelLite addresses these challenges by:

1. **Simplified Testing Environment**: Allowing developers to test kernel-style code in user mode you just need to include required header files
2. **Improved Development Workflow**: Enabling the use of standard debugging tools and testing frameworks not available in kernel mode
3. **Consistent API**: Providing implementations that try to match kernel functionality while working in user-mode contexts
4. **Reference Implementation**: Serving as a learning resource for understanding Windows kernel programming patterns

## Features

- Memory allocation and tracking with Windows Kernel-like semantics
- Linked list implementation similar to Windows Kernel
- Unicode string handling utilities
- Automatic versioning from Git tags

## Documentation

For more detailed information, please refer to:

- [Package Usage Guide](docs/package_usage.md) - How to use WinKernelLite in your own projects
- [Building Examples](docs/building_examples.md) - Guide to building the included examples
- [Examples Guide](docs/examples_guide.md) - Overview of all included examples
- [Working with UNICODE_STRING](docs/working_with_unicode_string.md) - Guide to Unicode string handling
- [Include Path Resolution](docs/include_path_resolution.md) - How include path issues were resolved
- [Build Improvements](docs/build_improvements.md) - Summary of build system improvements

## Installation

### System Compatibility

WinKernelLite is designed to work on both 32-bit and 64-bit Windows systems:

- On 64-bit Windows, the default installation path is `C:\Program Files (x86)\WinKernelLite`
- On 32-bit Windows, the default installation path is `C:\Program Files\WinKernelLite`

You can also set a custom installation path by setting the `WINKERNELLITE_INSTALL_PATH` environment variable before running any installation commands.

### Installation Options

```bash
# Configure
cmake -B build -S .

# Build
cmake --build build

# Install (this will install all components including GoogleTest)
cmake --install build

# Alternative: Using the custom target
cmake --build build --target install_winkernellite
```

### Default Installation (Library Only)

By default, WinKernelLite installs only the library files and not the examples:

```bash
cmake -B build -DINSTALL_EXAMPLES=OFF
cmake --build build --target install
```

### Installing with Examples

If you want to install the examples as well:

```bash
cmake -B build -DINSTALL_EXAMPLES=ON
cmake --build build --target install
```

For more installation options, run `install_guide.bat`.

## Usage with CMake

### Using find_package

```cmake
find_package(WinKernelLite REQUIRED)
target_link_libraries(your_target PRIVATE WinKernelLite::WinKernelLite)
```

### Including in your code

```cpp
#include <WinKernelLite/KernelHeapAlloc.h>
#include <WinKernelLite/Version.h>  // For version information

void example() {
    InitHeap();
    
    // Print version information
    printf("Using WinKernelLite version %s\n", WINKERNELLITE_VERSION);
    
    PVOID memory = ExAllocatePoolTracked(NonPagedPool, 1024);
    // Use memory...
    ExFreePoolTracked(memory);
    
    CleanupHeap();
}
```

## Examples

The project includes several examples demonstrating how to use WinKernelLite in real-world scenarios:

1. **Basic Version Info** - Shows how to access version information from the library
2. **Devices List** - Demonstrates managing device information using linked lists and UNICODE_STRING
   - [DevicesList Documentation](docs/example_devices_list.md)
3. **UNICODE_STRING Handling** - Examples of working with Windows kernel-style Unicode strings
   - [UNICODE_STRING Guide](docs/working_with_unicode_string.md)

To build and run the examples:

```bash
# Configure the project
cmake -B build -S .

# Build all examples
cmake --build build --target build_all_examples

# Run a specific example
cd examples/DevicesExample
./build_and_run.bat
```

## Versioning

WinKernelLite uses Git tags for versioning. The project automatically extracts the version from the most recent Git tag when you build the project.

For detailed information on the versioning system, see [docs/versioning.md](docs/versioning.md).

### Git Tag Format

Tags should follow semantic versioning format:

```
v1.2.3
```

The leading 'v' is optional and will be automatically removed.

### Setting a New Version

To set a new version:

```bash
# Tag the current commit with a new version
git tag -a v1.2.3 -m "Version 1.2.3"

# Push the tag to the remote repository
git push origin v1.2.3
```

Alternatively, use the provided PowerShell script:

```powershell
# Create a new version tag
.\Create-Version.ps1 -Version 1.2.3

# Create and push a new version tag
.\Create-Version.ps1 -Version 1.2.3 -Push
```

### Accessing Version Information in Code

Version information is available in your code through the `Version.h` header:

```cpp
#include <WinKernelLite/Version.h>

// Available macros:
// WINKERNELLITE_VERSION_MAJOR - Major version number (int)
// WINKERNELLITE_VERSION_MINOR - Minor version number (int)
// WINKERNELLITE_VERSION_PATCH - Patch version number (int)
// WINKERNELLITE_VERSION - Full version string (e.g., "1.2.3")
// WINKERNELLITE_GIT_TAG - Original Git tag (e.g., "v1.2.3")

void printVersion() {
    printf("WinKernelLite v%d.%d.%d\n", 
           WINKERNELLITE_VERSION_MAJOR,
           WINKERNELLITE_VERSION_MINOR,
           WINKERNELLITE_VERSION_PATCH);
}
```
